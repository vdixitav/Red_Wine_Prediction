# -*- coding: utf-8 -*-
"""Wine Quality Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jtETInSOHMjw4BPNRyW-9E9ucHjlrHwG

Importing dependency
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score

# loading dataset to pandas dataframe

wine_dataset = pd.read_csv('/content/winequality-red.csv')

wine_dataset.head()



wine_dataset.shape

# checking for missing values

wine_dataset.isnull().sum()

"""Data analysisi and visualatisation"""

# statistical mearures of dataset

wine_dataset.describe()

# no.of values for each quality

sns.catplot(x='quality', data = wine_dataset , kind='count')

# comparing other column wrt quality to see the relaton

# volatile acitity vs quality

plot = plt.figure(figsize=(5,5))
sns.barplot (x='quality' ,y= 'volatile acidity' ,data= wine_dataset)

# citric acid vs quality

plot = plt.figure(figsize=(5,5))
sns.barplot (x='quality' ,y= 'citric acid' ,data= wine_dataset)

# finding corelation with other column
# two types of correlation
# 1) positive 2) negative as in directly and inversly proportional



correlation =wine_dataset.corr()

# constucting heat map to understand correlation betwn column

# Plot heatmap
plt.figure(figsize=(10, 10))
sns.heatmap(correlation, annot=True, cmap='coolwarm', fmt='.2f', linewidths=.5)
plt.title('Correlation Heatmap')
plt.show()

"""# Data preprocessing"""

# separate data and label

X= wine_dataset.drop('quality', axis=1)

print(X)

x.shape

"""Lable Binarisation"""

Y = wine_dataset['quality'].apply(lambda y_value : 1 if y_value>=7 else 0)
print(Y)

# training and testing split

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=3)

print(Y.shape ,Y_train.shape , Y_test.shape)

"""Model Trianing

Random forest model
"""



model=RandomForestClassifier()

model.fit(X_train ,Y_train)

# model evaluation
#Accuracy on test data
X_test_prediction =model.predict(X_test)
test_data_accuracy= accuracy_score(X_test_prediction ,Y_test)

print('Accuracy: ', test_data_accuracy)

"""Building predictive system"""

inpute_data = ()

# changing i/p data to numpy array
input_data_as_numpy_aaray=np.asanyarray(inpute_data)

#reshaping the data as we are predicting the lable for only one instance